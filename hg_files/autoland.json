{
  "0": {
    "commiter_name": "Ehsan Akhgari <ehsan@mozilla.com>",
    "commit_date": "2018-11-27 02:46:50",
    "commit_message": "Bug 1508044 - Part 4: Make nsChannelClassifier use nsContentUtils::IsThirdPartyWindowOrChannel() in order to avoid having duplicated logic r=francois  Depends on D12853  Differential Revision: https://phabricator.services.mozilla.com/D12854",
    "node": "e3a074ae3f0c18a5329c23099c5169f135885852"
  },
  "1": {
    "commiter_name": "Ehsan Akhgari <ehsan@mozilla.com>",
    "commit_date": "2018-11-27 02:43:20",
    "commit_message": "Bug 1508044 - Part 3: Ensure that the third-party checks performed on channels in nsContentUtils::IsThirdPartyWindowOrChannel() follow the same logic as those performed in nsChannelClassifier r=francois  Depends on D12852  Differential Revision: https://phabricator.services.mozilla.com/D12853",
    "node": "691286d50c87eb419c121c88836a67a8227e611b"
  },
  "2": {
    "commiter_name": "Ehsan Akhgari <ehsan@mozilla.com>",
    "commit_date": "2018-11-27 02:38:52",
    "commit_message": "Bug 1508044 - Part 2: Check the return values of mozIThirdPartyUtil::IsThirdPartyFoo() in nsContentUtils::IsThirdPartyWindowOrChannel() r=francois  Differential Revision: https://phabricator.services.mozilla.com/D12852",
    "node": "5452c9164d46e49aa8ee6cd3444bb0f8cc7cc121"
  },
  "3": {
    "commiter_name": "WR Updater Bot <graphics-team@mozilla.staktrace.com>",
    "commit_date": "2018-11-27 04:54:00",
    "commit_message": "Bug 1510085 - Update webrender to commit 05bdcae134d73aca7bb48358e91de1f8aef27773 (WR PR #3354). r=kats  https://github.com/servo/webrender/pull/3354  Differential Revision: https://phabricator.services.mozilla.com/D13029",
    "node": "a12365223e8b4c0eb19eb9e65ebd233069109540"
  },
  "4": {
    "commiter_name": "WR Updater Bot <graphics-team@mozilla.staktrace.com>",
    "commit_date": "2018-11-27 04:53:43",
    "commit_message": "Bug 1510084 - Update webrender to commit 35027d93aded8c0a7887dadc8aef5e393171e802 (WR PR #3348). r=kats  https://github.com/servo/webrender/pull/3348  Differential Revision: https://phabricator.services.mozilla.com/D13028",
    "node": "a613bf1190880ef45811a35ab8e6904fe9263192"
  },
  "5": {
    "commiter_name": "WR Updater Bot <graphics-team@mozilla.staktrace.com>",
    "commit_date": "2018-11-27 04:53:03",
    "commit_message": "Bug 1510082 - Update reftest annotations for changes in WR PR #3346. r=kats  Depends on D13026  Differential Revision: https://phabricator.services.mozilla.com/D13027",
    "node": "2b0c95030a8b9c00cd68bbb0c485b8378955ff40"
  },
  "6": {
    "commiter_name": "WR Updater Bot <graphics-team@mozilla.staktrace.com>",
    "commit_date": "2018-11-27 04:52:50",
    "commit_message": "Bug 1510082 - Update webrender to commit e2e52b1145ad959191c0612edd41b0b189cf6b59 (WR PR #3346). r=kats  https://github.com/servo/webrender/pull/3346  Differential Revision: https://phabricator.services.mozilla.com/D13026",
    "node": "4585bb8bd85ac70f17a25bc2407d29b964a4e744"
  },
  "7": {
    "commiter_name": "WR Updater Bot <graphics-team@mozilla.staktrace.com>",
    "commit_date": "2018-11-27 03:16:27",
    "commit_message": "Bug 1510078 - Update webrender to commit f450af9277e2474e2a2a2c1358689ca9486e2a09 (WR PR #3345). r=kats  https://github.com/servo/webrender/pull/3345  Differential Revision: https://phabricator.services.mozilla.com/D13025",
    "node": "895fcf304c2a19969e8d075457a7cee36ea06895"
  },
  "8": {
    "commiter_name": "D\u00e3o Gottwald <dao@mozilla.com>",
    "commit_date": "2018-11-26 18:07:07",
    "commit_message": "Bug 1509488 - Use keydown handler instead of <key> for Shift+Ctrl+Tab. r=jaws  Differential Revision: https://phabricator.services.mozilla.com/D12744",
    "node": "40310bdbb6708f03fd171eb194abb09d7e02f72b"
  },
  "9": {
    "commiter_name": "Jed Davis <jld@mozilla.com>",
    "commit_date": "2018-11-22 02:06:22",
    "commit_message": "Bug 1487287 - Move child process launch off the I/O thread. r=mccr8  Launching processes takes enough time that we should avoid blocking the parent process's IPC I/O thread for it; it's less bad for responsiveness than blocking the main thread, but it's not good.  On Windows we need to use a dedicated thread, because the sandbox isn't thread-safe and it asserts that the same thread is used for every launch.  Otherwise, a thread pool is used.  Depends on D8945  Differential Revision: https://phabricator.services.mozilla.com/D8946",
    "node": "8b1f88d7bfeb1949060170ba51b6530db5e93c8e"
  },
  "10": {
    "commiter_name": "Jed Davis <jld@mozilla.com>",
    "commit_date": "2018-11-22 02:06:20",
    "commit_message": "Bug 1487287 - Set profiler env vars in child processes without side-effecting the parent process. r=mstange  We can directly set environment variables for the child process on all platforms now, instead of changing the parent's environment and inheriting the changes.  This simplifies memory management, but more importantly it's necessary for thread safety to allow launching processes from a thread pool.  Depends on D8944  Differential Revision: https://phabricator.services.mozilla.com/D8945",
    "node": "8fa5e81ad8015f9bd5ba2b7497f840e4cc50b8bd"
  },
  "11": {
    "commiter_name": "Jed Davis <jld@mozilla.com>",
    "commit_date": "2018-11-22 02:06:17",
    "commit_message": "Bug 1474991 - Add new and improved performance telemetry for child process launching. r=mccr8,mconley,janerik  This patch adds some telemetry histograms:    CONTENT_PROCESS_LAUNCH_IS_SYNC - boolean, true if the content process was launched synchronously (blocking the main thread)    CONTENT_PROCESS_SYNC_LAUNCH_MS - the time consumed by sync launch; the main thread will be busy or blocked for this entire time    CONTENT_PROCESS_LAUNCH_TOTAL_MS - the total time elapsed from the start of async content process launch until the launch promise is resolved and the ContentParent can be sent IPDL messages    CONTENT_PROCESS_LAUNCH_MAINTHREAD_MS - the time consumed on the parent process main thread during async content process launch; typically this is due to ContentParent::Init.    CHILD_PROCESS_LAUNCH_MS - for any kind of Gecko child process (including plugins, GPU, etc.), the time taken in the common process launch code (which is run off-main-thread)  The probes restricted to async content process launch don't have \"async\" in the name because that will eventually become the only kind of content process launch.  Depends on D8943  Differential Revision: https://phabricator.services.mozilla.com/D8944",
    "node": "7a480161fa0fc82f11d2ed492f9f8938a1cdf1fc"
  },
  "12": {
    "commiter_name": "Jed Davis <jld@mozilla.com>",
    "commit_date": "2018-11-22 02:35:53",
    "commit_message": "Bug 1446161 - Asynchronously launch preallocated content processes using MozPromise. r=mccr8  There are several layers to this patch:  1. GeckoChildProcessHost now exposes a promise that's resolved when the process handle is available (or rejected if launch failed), as a nonblocking alternative to LaunchAndWaitForProcessHandle.  2. ContentParent builds on this with the private method LaunchSubprocessAsync and the public method PreallocateProcessAsync; synchronous launch continues to exist for the regular on-demand launch path, for the time being.  3. PreallocatedProcessManager now uses async launch, and handles the new \"launch in progress\" state appropriately.  Depends on D8942  Differential Revision: https://phabricator.services.mozilla.com/D8943",
    "node": "80116391b7fe48cb2ecc1960721d74dc2c185c6a"
  },
  "13": {
    "commiter_name": "Jed Davis <jld@mozilla.com>",
    "commit_date": "2018-11-22 02:06:14",
    "commit_message": "Bug 1446161 - Remove the earlier attempt at async launch. r=spohl,mccr8  The first attempt at async launch tried to hide the asynchrony inside IPC, by making the process seem to be launched enough to construct new channels and send it messages, and lazily blocking on the pid/handle. Unfortunately, in practice we wind up needing the pid/handle immediately, and this requirement is too deeply embedded in IPC for that to be viable.  (The alternative that will be used instead -- exposing process launch via an explicitly asynchronous promise interface -- is made simpler by Project Fission's upcoming rewrite of how the DOM requests new content processes.)  Depends on D8941  Differential Revision: https://phabricator.services.mozilla.com/D8942",
    "node": "1bdf64b29121762bbf6b1e13df1828034b149bac"
  },
  "14": {
    "commiter_name": "Jed Davis <jld@mozilla.com>",
    "commit_date": "2018-11-22 22:21:03",
    "commit_message": "Bug 1446161 - Remove CONTENT_PROCESS_LAUNCH_TIME_MS telemetry. r=mconley,chutten  The CONTENT_PROCESS_LAUNCH_TIME_MS histogram is currently gathering times from two different spans of the launch process and mixing them together; it's at best a rough approximation of \"launch time\".  In addition, with async launch we'll want to gather different metrics than for sync launch (see comments on bug 1474991).  So I'm removing this histogram and will replace it with separate sync and async metrics in bug 1474991; I intend to land both bugs' patches at or near the same time, so we won't have a gap in getting some kind of data.  Depends on D8940  Differential Revision: https://phabricator.services.mozilla.com/D8941",
    "node": "37bf52f0e9cf2ccd4427197a2e99f40c239f01a7"
  },
  "15": {
    "commiter_name": "Jed Davis <jld@mozilla.com>",
    "commit_date": "2018-11-22 02:06:09",
    "commit_message": "Bug 1496608 - Don't leak GeckoChildProcessHost when a content process fails to launch. r=mccr8  Depends on D8939  Differential Revision: https://phabricator.services.mozilla.com/D8940",
    "node": "8ede2ebe6b7ab639e729614cb3609776955a6bc2"
  },
  "16": {
    "commiter_name": "Jed Davis <jld@mozilla.com>",
    "commit_date": "2018-11-22 02:06:07",
    "commit_message": "Bug 1488993 - Fix PreallocatedProcessManager blocker management (v2). r=mconley,smaug  This fixes/adjusts two things about how content process preallocation is blocked:  1. Processes aren't registered as blockers until after they launch successfully.  The main goal is to not leak a blocker if launch fails, but we don't need to block  while  launching synchronously, because this all happens on the main thread.  2. Preallocated processes themselves aren't blockers.  The main goal here is so that async preallocation doesn't need extra complexity to avoid being blocked by itself when launch completes.  This mostly doesn't affect actual behavior, because we currently support at most one preallocated process.  The difference is the window from when the process is sent its first PBrowserConstructor until when it's next idle, where there is now no longer a blocker, but this seems to be relatively short (~100ms) and we don't even try to launch a new process until at least 1s + an idle runnable.  This patch does not explicitly RemoveBlocker in ActorDestroy like the first attempt did, because it's unnecessary: this is handled in the ipc:content-shutdown observer.  Differential Revision: https://phabricator.services.mozilla.com/D8939",
    "node": "cea43bc88c7a564f0ca72995f6eac6b0d118f3f1"
  },
  "17": {
    "commiter_name": "L. David Baron <dbaron@dbaron.org>",
    "commit_date": "2018-11-26 01:18:19",
    "commit_message": "Bug 1159042 - p6. Use NS_FRAME_DYNAMIC_REFLOW_ROOT - r=dholbert  Differential Revision: https://phabricator.services.mozilla.com/D9492",
    "node": "fe77c09dee3107e675162b760a6efa9b5f0bcce3"
  },
  "18": {
    "commiter_name": "L. David Baron <dbaron@dbaron.org>",
    "commit_date": "2018-11-27 01:21:54",
    "commit_message": "Bug 1159042 - p5. Add NS_FRAME_DYNAMIC_REFLOW_ROOT on frames that we can dynamically make reflow roots - r=dholbert  Differential Revision: https://phabricator.services.mozilla.com/D9491",
    "node": "db0e173a6ed2ed65c22a2e60bc3f358e3d19d82c"
  },
  "19": {
    "commiter_name": "Gerald Squelart <gsquelart@mozilla.com>",
    "commit_date": "2018-11-27 01:24:34",
    "commit_message": "Bug 1159042 - p4. Make mDirtyRoots manage roots in preferred depth order - r=dbaron  When popping a dirty root, take the shallowest one first (so we reflow from outer frames first, to avoid potential duplicate reflow of inner frames).  Prevent duplicate roots (to be reworked in a future bug).  Differential Revision: https://phabricator.services.mozilla.com/D9490",
    "node": "080b9ceee8eca10edabc249172d7f113c3642873"
  }
}